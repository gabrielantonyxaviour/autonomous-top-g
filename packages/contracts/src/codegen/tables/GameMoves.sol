// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { Color, GameState } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("GameMoves")));
bytes32 constant GameMovesTableId = _tableId;

struct GameMovesData {
  Color turn;
  Color playerColor;
  bytes32 playerAddress;
  GameState state;
  string fenCode;
}

library GameMoves {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.BYTES32;
    _schema[3] = SchemaType.UINT8;
    _schema[4] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "turn";
    _fieldNames[1] = "playerColor";
    _fieldNames[2] = "playerAddress";
    _fieldNames[3] = "state";
    _fieldNames[4] = "fenCode";
    return ("GameMoves", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get turn */
  function getTurn(bytes32 gameId) internal view returns (Color turn) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return Color(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get turn (using the specified store) */
  function getTurn(IStore _store, bytes32 gameId) internal view returns (Color turn) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return Color(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set turn */
  function setTurn(bytes32 gameId, Color turn) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(turn)));
  }

  /** Set turn (using the specified store) */
  function setTurn(IStore _store, bytes32 gameId, Color turn) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(turn)));
  }

  /** Get playerColor */
  function getPlayerColor(bytes32 gameId) internal view returns (Color playerColor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return Color(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get playerColor (using the specified store) */
  function getPlayerColor(IStore _store, bytes32 gameId) internal view returns (Color playerColor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return Color(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set playerColor */
  function setPlayerColor(bytes32 gameId, Color playerColor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(playerColor)));
  }

  /** Set playerColor (using the specified store) */
  function setPlayerColor(IStore _store, bytes32 gameId, Color playerColor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(playerColor)));
  }

  /** Get playerAddress */
  function getPlayerAddress(bytes32 gameId) internal view returns (bytes32 playerAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get playerAddress (using the specified store) */
  function getPlayerAddress(IStore _store, bytes32 gameId) internal view returns (bytes32 playerAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set playerAddress */
  function setPlayerAddress(bytes32 gameId, bytes32 playerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((playerAddress)));
  }

  /** Set playerAddress (using the specified store) */
  function setPlayerAddress(IStore _store, bytes32 gameId, bytes32 playerAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((playerAddress)));
  }

  /** Get state */
  function getState(bytes32 gameId) internal view returns (GameState state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return GameState(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get state (using the specified store) */
  function getState(IStore _store, bytes32 gameId) internal view returns (GameState state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return GameState(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set state */
  function setState(bytes32 gameId, GameState state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(state)));
  }

  /** Set state (using the specified store) */
  function setState(IStore _store, bytes32 gameId, GameState state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(state)));
  }

  /** Get fenCode */
  function getFenCode(bytes32 gameId) internal view returns (string memory fenCode) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /** Get fenCode (using the specified store) */
  function getFenCode(IStore _store, bytes32 gameId) internal view returns (string memory fenCode) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /** Set fenCode */
  function setFenCode(bytes32 gameId, string memory fenCode) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((fenCode)));
  }

  /** Set fenCode (using the specified store) */
  function setFenCode(IStore _store, bytes32 gameId, string memory fenCode) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setField(_tableId, _keyTuple, 4, bytes((fenCode)));
  }

  /** Get the length of fenCode */
  function lengthFenCode(bytes32 gameId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of fenCode (using the specified store) */
  function lengthFenCode(IStore _store, bytes32 gameId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of fenCode (unchecked, returns invalid data if index overflows) */
  function getItemFenCode(bytes32 gameId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of fenCode (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemFenCode(IStore _store, bytes32 gameId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to fenCode */
  function pushFenCode(bytes32 gameId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Push a slice to fenCode (using the specified store) */
  function pushFenCode(IStore _store, bytes32 gameId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Pop a slice from fenCode */
  function popFenCode(bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Pop a slice from fenCode (using the specified store) */
  function popFenCode(IStore _store, bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Update a slice of fenCode at `_index` */
  function updateFenCode(bytes32 gameId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Update a slice of fenCode (using the specified store) at `_index` */
  function updateFenCode(IStore _store, bytes32 gameId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 gameId) internal view returns (GameMovesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 gameId) internal view returns (GameMovesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 gameId,
    Color turn,
    Color playerColor,
    bytes32 playerAddress,
    GameState state,
    string memory fenCode
  ) internal {
    bytes memory _data = encode(turn, playerColor, playerAddress, state, fenCode);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 gameId,
    Color turn,
    Color playerColor,
    bytes32 playerAddress,
    GameState state,
    string memory fenCode
  ) internal {
    bytes memory _data = encode(turn, playerColor, playerAddress, state, fenCode);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 gameId, GameMovesData memory _table) internal {
    set(gameId, _table.turn, _table.playerColor, _table.playerAddress, _table.state, _table.fenCode);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 gameId, GameMovesData memory _table) internal {
    set(_store, gameId, _table.turn, _table.playerColor, _table.playerAddress, _table.state, _table.fenCode);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (GameMovesData memory _table) {
    // 35 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 35));

    _table.turn = Color(uint8(Bytes.slice1(_blob, 0)));

    _table.playerColor = Color(uint8(Bytes.slice1(_blob, 1)));

    _table.playerAddress = (Bytes.slice32(_blob, 2));

    _table.state = GameState(uint8(Bytes.slice1(_blob, 34)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 35) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 67;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.fenCode = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    Color turn,
    Color playerColor,
    bytes32 playerAddress,
    GameState state,
    string memory fenCode
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(fenCode).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(turn, playerColor, playerAddress, state, _encodedLengths.unwrap(), bytes((fenCode)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 gameId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((gameId));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
